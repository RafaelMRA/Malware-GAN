import tensorflow as tf
import numpy as np
import pandas as pd
import csv
import os

#batch size
mb_size = 32
#column of data
X_dim = 39

z_dim = 2000
#hidden units in one layer
h_dim = 128

#mnist = input_data.read_data_sets('MNIST_data', one_hot=True)

# read csv file
df = pd.read_csv('/Users/franklan123/Desktop/supermarket2000.csv', usecols = list(range(1,40)),dtype=np.float32,header = 0)
#df = pd.read_csv('/Users/franklan123/Desktop/supermarket2000.csv', usecols = list(range(1,40)),dtype=np.float32,header = 0)
d = df.as_matrix()
#print (d)
rmean = np.nanmean(d)
ee= df.max().as_matrix()
zmax = np.amax(ee)
smin = np.amin(ee)
rrange = zmax - smin
#print(rrange)
data = (d - rmean)/rrange

# get max in every column
column_max = []
column_min = []
column_range = []

for i in range (39):
       # column_max =[]
        column_max.append(np.max(d[:,i]))
       # column_min =[]
        column_min.append(np.min(d[:,i]))
       # column_range = column_max - column_min
#print(column_min)
#print(column_max)

for i in range(39):
    column_range.append(column_max[i] - column_min[i])
       # print(column_range)
#print(column_range)

g = tf.unstack(data, num = 2000, axis = 0)



def xavier_init(size):
    in_dim = size[0]
    xavier_stddev = 1. / tf.sqrt(in_dim / 2.)
    return tf.random_normal(shape=size, stddev=xavier_stddev)


X = tf.placeholder(tf.float32, shape=[None, X_dim])

D_W1 = tf.Variable(xavier_init([X_dim, h_dim]))
D_b1 = tf.Variable(tf.zeros(shape=[h_dim]))

D_W2 = tf.Variable(xavier_init([h_dim, 1]))
D_b2 = tf.Variable(tf.zeros(shape=[1]))

theta_D = [D_W1, D_W2, D_b1, D_b2]


z = tf.placeholder(tf.float32, shape=[None, z_dim])

G_W1 = tf.Variable(xavier_init([z_dim, h_dim]))
G_b1 = tf.Variable(tf.zeros(shape=[h_dim]))

G_W2 = tf.Variable(xavier_init([h_dim, X_dim]))
G_b2 = tf.Variable(tf.zeros(shape=[X_dim]))

theta_G = [G_W1, G_W2, G_b1, G_b2]


def sample_z(m, n):
    return np.random.uniform(-1., 1., size=[m, n])


def generator(z):
    G_h1 = tf.nn.relu(tf.matmul(z, G_W1) + G_b1)
    G_log_prob = tf.matmul(G_h1, G_W2) + G_b2
    G_prob = tf.nn.sigmoid(G_log_prob)
    return G_prob


def discriminator(x):
    D_h1 = tf.nn.relu(tf.matmul(x, D_W1) + D_b1)
    out = tf.matmul(D_h1, D_W2) + D_b2
    return out


G_sample = generator(z)
D_real = discriminator(X)
D_fake = discriminator(G_sample)

D_loss = tf.reduce_mean(D_real) - tf.reduce_mean(D_fake)
G_loss = -tf.reduce_mean(D_fake)

D_solver = (tf.train.RMSPropOptimizer(learning_rate=1e-4)
            .minimize(-D_loss, var_list=theta_D))
G_solver = (tf.train.RMSPropOptimizer(learning_rate=1e-4)
            .minimize(G_loss, var_list=theta_G))

clip_D = [p.assign(tf.clip_by_value(p, -0.01, 0.01)) for p in theta_D]

X_mb, *_ = tf.train.batch(g ,mb_size, capacity = 2000)
#tf.train.batch(g,10)
#sess = tf.Session()
#sess.run(tf.global_variables_initializer())
sess = tf.train.MonitoredSession()

if not os.path.exists('/Users/franklan123/Desktop/QQQQ'):
    os.makedirs('/Users/franklan123/Desktop/QQQQ')

i = 0
#g = tf.slice(data,[0,0],[1,39])
for it in range(30000):
  #  print(1)
    
    for _ in range(5):
       # print(2)
        
      #  print(X_mb)
        x_batch = sess.run(X_mb)
       # print(4)
        _, D_loss_curr, _ = sess.run(
            [D_solver, D_loss, clip_D],
            feed_dict={X: x_batch, z: sample_z(mb_size, z_dim)}
        )
    _, G_loss_curr = sess.run(
        [G_solver, G_loss],
        feed_dict={z: sample_z(mb_size, z_dim)}
    )
   # print(1)
   # print('This is iteration' + i)
    if it % 100 == 0:
        print('Iter: {}; D loss: {:.4}; G_loss: {:.4}'
              .format(it, D_loss_curr, G_loss_curr))

        if it % 2000 == 0:
          #  if it == 0:
           #     continue
            samples = sess.run(G_sample, feed_dict={z: sample_z(20, z_dim)})
            #samples = samples
          #  with open('/Users/franklan123/Desktop/QQQQ/output.csv', 'w', newline = '') as f:
           #     writer = csv.writer(f)
           #     writer.writerows(samples)
            print(samples)
            result = [[0 for x in range (39)] for y in range(20)]
            for i in range (20):
                for j in range (39):
                    samples[i][j] = samples[i][j] * column_range[j]+column_min[j]
                    #samples[i][j] = np.asscalar(samples[i][j])
                    result[i][j] =  int(round(np.asscalar(samples[i][j]),0))
                    #samples[i][j] = float("{:.1f}".format(float(samples[i][j])))
                    #samples[i][j] = (intsamples[i][j]
                    
                    #samp = [[1,2],[3,4]]
            for i in range (20):
                result[i].insert(0,i + 1)
            with open('/Users/franklan123/Desktop/QQQQ/output.csv', 'w', newline = '') as f:
                writer = csv.writer(f)
                writer.writerows(['1'])
                writer.writerows(result)
                            #print(samp)
            #samples[0][0] = float("{:.1f}".format(float(samples[i][j])))
           # samples.astype(int)
           
            print(result)
            print(type(result[0][0]))
            
            i += 1
            
            